---
# If we don't do this here, nodes never show as Ready since they don't
# have a CNI (because Flannel is disabled)
- name: 'Install Calico CNI'
  vars:
    manifests:
      - 'calico/tigera-operator.yaml'
      - 'calico/custom-resources.yaml'
      - 'calico/calicoctl.yaml'
    namespace: 'kube-system'
    wait_selectors:
      - 'k8s-app=kube-dns'
      - 'k8s-app=metrics-server'
      - 'app=local-path-provisioner'
  import_tasks: 'install_and_wait.yml'

# do repeat-until for long waits
# TODO: failed_when
- name: 'Wait for all nodes'
  vars:
    timeout: '3600s'
    e_ok: 'condition met'  # if needed
  loop: '{{ groups["nodes"] }}'
  run_once: yes
  command:
    argv:
      - '/usr/local/bin/kubectl'
      - 'wait'
      - '--timeout={{ timeout }}'
      - '--for=condition=Ready'
      - 'node'
      - '{{ item }}.{{ domain }}'

# Need Longhorn before Registry
- name: 'Install Longhorn'
  vars:
    manifests:
      - 'longhorn/longhorn.yaml'
    namespace: 'longhorn-system'
    wait_timeout: '86400s'
    wait_selectors:
      - 'app.kubernetes.io/instance=longhorn'
      - 'longhorn.io/component=engine-image'
      - 'longhorn.io/component=instance-manager'
      - 'app=csi-attacher'
      - 'app=csi-provisioner'
      - 'app=csi-resizer'
      - 'app=csi-snapshotter'
      - 'longhorn.io/component=instance-manager'
      - 'app=longhorn-csi-plugin'
  import_tasks: 'install_and_wait.yml'

- name: 'Install registry configuration'
  blockinfile:
    block: |
      mirrors:
        docker.io:
          endpoint:
            - 'http://127.0.0.1:{{ registry_service_node_port }}'
    dest: '/etc/rancher/k3s/registries.yaml'
    create: yes
    marker: '# {mark} ANSIBLE MANAGED BLOCK --- registry'

# This should be first after Calico. I'd be tempted to install before
# Calico, but I don't think that'd work.
# Might need to set up some storage.
# https://thomasdegraaff.eu/notes/2021/12/04/k3s_docker_pull_through_registry/
- name: 'Install Registry'
  vars:
    manifests:
      - 'docker-registry/docker-registry.yaml'
    namespace: 'docker-registry'
    wait_selectors:
      - 'app=docker-registry'
  import_tasks: 'install_and_wait.yml'

- name: 'Install MetalLB'
  vars:
    manifests:
      - 'metallb/metallb-native.yaml'
    namespace: 'metallb-system'
    wait_selectors:
      - 'component=controller'
      - 'component=speaker'
  import_tasks: 'install_and_wait.yml'

- name: 'Install MetalLB pool'
  vars:
    manifests:
      - 'metallb/metallb-pool.yaml'
  import_tasks: 'install_and_wait.yml'

- name: 'Install nginx ingress'
  vars:
    manifests:
      - 'nginx-ingress/nginx-ingress.yaml'
  import_tasks: 'install_and_wait.yml'

- name: 'Install cert-manager'
  vars:
    manifests:
      - 'cert-manager/cert-manager.yaml'
    namespace: 'cert-manager'
    wait_selectors:
      - 'app.kubernetes.io/instance=cert-manager'
  import_tasks: 'install_and_wait.yml'

# do repeat-until for long waits
- name: 'Wait for remaining services (mostly Longhorn)'
  vars:
    timeout: '86400s'
    e_ok: 'condition met'  # if needed
    namespace: 'kube-system'
  loop:
    - selector: 'app.kubernetes.io/instance=longhorn'
      namespace: 'longhorn-system'
    - selector: 'longhorn.io/component=engine-image'
      namespace: 'longhorn-system'
    - selector: 'longhorn.io/component=instance-manager'
      namespace: 'longhorn-system'
    - selector: 'app=csi-attacher'
      namespace: 'longhorn-system'
    - selector: 'app=csi-provisioner'
      namespace: 'longhorn-system'
    - selector: 'app=csi-resizer'
      namespace: 'longhorn-system'
    - selector: 'app=csi-snapshotter'
      namespace: 'longhorn-system'
    - selector: 'longhorn.io/component=instance-manager'
      namespace: 'longhorn-system'
    - selector: 'app=longhorn-csi-plugin'
      namespace: 'longhorn-system'
    - selector: 'job-name=helm-install-ingress-nginx'
      namespace: 'kube-system'
    - selector: 'app.kubernetes.io/instance=cert-manager'
      namespace: 'cert-manager'
  run_once: yes
  command:
    argv:
      - '/usr/local/bin/kubectl'
      - 'wait'
      - '--timeout={{ timeout }}'
      - '--for=condition=Ready'
      - '--selector={{ item.selector }}'
      - '-n'
      - '{{ namespace }}'
      - 'pods'

- name: 'Delete completed jobs'
  loop:
    - job: 'helm-install-ingress-nginx'
      namespace: 'kube-system'
  run_once: yes
  command:
    argv:
      - '/usr/local/bin/kubectl'
      - 'delete'
      - 'job'
      - '{{ item.job }}'
      - '-n'
      - '{{ item.namespace }}'
...
# vim: set filetype=yaml

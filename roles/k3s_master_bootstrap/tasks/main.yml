---
- name: 'Generate random token'
  run_once: yes
  vars:
    spec: '/dev/null chars=ascii_letters,digits length=64'
    seed: '{{ inventory_hostname ~ now().microsecond }}'
  set_fact:
    random_token: '{{ lookup("password", spec, seed=seed)
                      | password_hash("sha256")
                      | b64encode }}'

- name: 'Copy token to masters'
  copy:
    content: '{{ random_token }}'
    dest: '{{ random_token_file }}'
    mode: '0400'  # hmm?

# Remove old configuration
- name: 'Unmount kubelet'
  when: 'clobber_ok'
# Looks like the whole posix collection is messed up
#  mount:
#    name: '/var/lib/kubelet'
#    state: 'unmounted'
  register: 'reg_unmount'
  become: yes
  failed_when:
    - 'reg_unmount.rc != 0'
    - 'e_notfound not in reg_unmount.stderr'
    - 'e_already not in reg_unmount.stderr'
  vars:
    e_notfound: 'no mount point specified'  # crappy inaccurate error
    e_already: 'not mounted'
  command:
    argv:
      - '/usr/bin/umount'
      - '/var/lib/kubelet'

- name: 'Remove existing configuration'
  when: 'clobber_ok'
  loop: '{{ k3s_clobber_files + k3s_clobber_os_files[distro] }}'
  file:
    path: '{{ item }}'
    state: 'absent'

- name: 'Correct binary permissions'
  file:
    path: '/usr/local/bin/k3s'
    mode: '0755'
    owner: 'root'
    group: 'root'

- name: 'Create symlinks'
  loop:
    - 'kubectl'
    - 'crictl'
    - 'ctr'
  file:
    src: '/usr/local/bin/k3s'
    dest: '/usr/local/bin/{{ item }}'
    state: 'link'
    mode: '0755'
    owner: 'root'
    group: 'root'

- name: 'Create scripts'
  loop:
    - '/usr/local/bin/k3s-killall.sh'
    - '/usr/local/bin/k3s-uninstall.sh'
  copy:
    src: '{{ item[1:] }}'
    dest: '{{ item }}'
    mode: '0755'
    owner: 'root'
    group: 'root'

- name: 'Ensure configuration directory exists'
  file:
    path: '/etc/rancher/k3s'
    state: 'directory'

- name: 'Export environment to file'
  register: 'reg_environment'
  command:
    argv:
      - '/bin/sh'
      - '-c'
      - 'export'

- name: 'Delete environment settings'
  file:
    path: '/etc/rancher/k3s/k3s.env'
    state: 'absent'

- name: 'Touch environment settings'
  file:
    path: '/etc/rancher/k3s/k3s.env'
    state: 'touch'
    owner: 'root'
    group: 'root'
    mode: '0644'

- name: 'Create environment settings'
  when: '"_PROXY" in item
         or "_proxy" in item
         or "K3S" in item
         or "CONTAINERD" in item'
  loop: '{{ reg_environment.stdout_lines }}'
  lineinfile:
    line: '{{ item }}'
    dest: '/etc/rancher/k3s/k3s.env'
    create: yes
    owner: 'root'
    group: 'root'
    mode: '0644'

- name: 'Install for RHEL'
  when: 'distro == "rhel"'
  import_tasks: 'rhel_install.yml'

- name: 'Install for Void'
  when: 'distro == "void"'
  import_tasks: 'void_install.yml'

- name: 'Reboot'
  when: 'is_primary'
  reboot:

- name: 'Copy token file from primary'
  when: 'is_primary'
  register: 'reg_read_token'
  run_once: yes
  # delegate_to: '{{ primary_group | first }}'
  slurp:
    path: '/var/lib/rancher/k3s/server/node-token'

- name: 'Write token file to secondary'
  when: 'not is_primary'
  copy:
    content: '{{ reg_read_token.content | b64decode }}'
    dest: '/var/lib/rancher/k3s/server/token'

- name: 'Reboot'
  when: 'not is_primary'
  reboot:

# Each can take a long time (>20m) to stabilise. Or my slow internet
# connection takes forever to download the images. That might be it.
- name: 'Install manifests'
  when: 'is_primary'
  block:
    - name: 'Copy over manifests'
      copy:
        src: 'manifests'
        dest: '.'

    - name: 'Install Calico CNI'
      loop:
        - 'tigera-operator.yaml'
        - 'custom-resources.yaml'
      command:
        argv:
          - '/usr/local/bin/kubectl'
          - 'create'
          - '-f'
          - 'manifests/calico/{{ item }}'

#- name: 'Unarchive the calicoctl binary'
#  when: 'opts_is_primary'
#  unarchive:
#    src: 'binaries/calicoctl-{{ calicoctl_version }}.tgz'
#    dest: '/usr/local/bin/'

#- name: 'Permission the binary'
#  when: 'opts_is_primary'
#  file:
#    path: '/usr/local/bin/calicoctl'
#    mode: '0755'

# curl -sfL https://get.k3s.io | K3S_TOKEN=SECRET sh -s - server \
#     --server https://<ip or hostname of server1>:6443
# # --tls-san=<FIXED_IP> # Optional, needed if using a fixed registration address
    - name: 'Install nginx-ingress'
      loop:
        - 'ingress-nginx.yaml'
      command:
        argv:
          - '/usr/local/bin/kubectl'
          - 'create'
          - '-f'
          - 'manifests/nginx-ingress/{{ item }}'

# kubectl wait --namespace ingress-nginx --for=condition=ready --selector=app.kubernetes.io/component=controller --timeout=120s pod
# hmm, doesn't work for other services

    - name: 'Install MetalLB'
      loop:
        - 'metallb-native.yaml'
      command:
        argv:
          - '/usr/local/bin/kubectl'
          - 'create'
          - '-f'
          - 'manifests/metallb/{{ item }}'

# for Longhorn:
# sudo mount --make-rshared /
# :shrug:

    - name: 'Install Longhorn'
      loop:
        - 'longhorn.yaml'
      command:
        argv:
          - '/usr/local/bin/kubectl'
          - 'create'
          - '-f'
          - 'manifests/longhorn/{{ item }}'

    - name: 'Install NFS external provisioner'
      loop:
        - 'nfs.yaml'
      command:
        argv:
          - '/usr/local/bin/kubectl'
          - 'create'
          - '-f'
          - 'manifests/nfs/{{ item }}'

# . Automatic SSL certificate management and renewals with cert-manager (optional).
...
# vim: set filetype=yaml

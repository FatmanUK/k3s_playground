---
# Remove old configuration
- name: 'Unmount kubelet'
  when: 'clobber_ok'
# Looks like the whole posix collection is messed up
#  mount:
#    name: '/var/lib/kubelet'
#    state: 'unmounted'
  register: 'reg_unmount'
  become: yes
  failed_when:
    - 'reg_unmount.rc != 0'
    - 'e_notfound not in reg_unmount.stderr'
    - 'e_already not in reg_unmount.stderr'
  vars:
    e_notfound: 'no mount point specified'  # crappy inaccurate error
    e_already: 'not mounted'
  command:
    argv:
      - '/usr/bin/umount'
      - '/var/lib/kubelet'

- name: 'Remove existing configuration'
  when: 'clobber_ok'
  loop: '{{ k3s_clobber_files + k3s_clobber_os_files[distro] }}'
  file:
    path: '{{ item }}'
    state: 'absent'

- name: 'Create symlinks'
  loop:
    - 'kubectl'
    - 'crictl'
    - 'ctr'
  file:
    src: '/usr/local/bin/k3s'
    dest: '/usr/local/bin/{{ item }}'
    state: 'link'
    mode: '0755'
    owner: 'root'
    group: 'root'

- name: 'Create scripts'
  loop:
    - '/usr/local/bin/k3s-killall.sh'
    - '/usr/local/bin/k3s-uninstall.sh'
  copy:
    src: '{{ item[1:] }}'
    dest: '{{ item }}'
    mode: '0755'
    owner: 'root'
    group: 'root'

- name: 'Ensure k3s directories exist'
  loop:
    - '/etc/rancher/k3s'
    - '/var/lib/rancher/k3s/server'   # ?
  file:
    path: '{{ item }}'
    state: 'directory'

- name: 'Export environment to file'
  register: 'reg_environment'
  command:
    argv:
      - '/bin/sh'
      - '-c'
      - 'export'

- name: 'Delete environment settings'
  file:
    path: '/etc/rancher/k3s/k3s.env'
    state: 'absent'

- name: 'Touch environment settings'
  file:
    path: '/etc/rancher/k3s/k3s.env'
    state: 'touch'
    owner: 'root'
    group: 'root'
    mode: '0644'

- name: 'Create environment settings'
  when: '"_PROXY" in item
         or "_proxy" in item
         or "K3S" in item
         or "CONTAINERD" in item'
  loop: '{{ reg_environment.stdout_lines }}'
  lineinfile:
    line: '{{ item }}'
    dest: '/etc/rancher/k3s/k3s.env'
    create: yes
    owner: 'root'
    group: 'root'
    mode: '0644'

- name: 'Template in some files'
  loop:
    - '/etc/environment'
  template:
    src: '{{ item[1:] }}.j2'
    dest: '{{ item }}'

- name: 'Copy token file from primary'
  when: 'is_primary'
  register: 'reg_read_token'
  run_once: yes
  slurp:
    path: '/var/lib/rancher/k3s/server/token'

- name: 'Set server_token fact'
  set_fact:
    server_token: '{{ (reg_read_token.content | b64decode).split("\n")[0] }}'

- name: 'Install for RHEL'
  when: 'distro == "rhel"'
  import_tasks: 'rhel_install.yml'

- name: 'Install for Void'
  when: 'distro == "void"'
  import_tasks: 'void_install.yml'

- name: 'Reboot'
  when: 'is_primary'
  reboot:
    post_reboot_delay: 30

- name: 'Reboot'
  when: 'not is_primary'
  reboot:
    post_reboot_delay: 10
...
# vim: set filetype=yaml

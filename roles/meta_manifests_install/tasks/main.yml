---
# TODO: failed_when for docker
- name: 'Obtain manifest images'
  connection: 'local'
  run_once: yes
  become: no
  loop: '{{ images }}'
  command:
    argv:
      - '/usr/bin/docker'
      - 'pull'
      - '{{ item }}'

# TODO: failed_when for docker
- name: 'Save manifest images'
  connection: 'local'
  run_once: yes
  become: no
  vars:
    tarfile: '{{ item.split(":") | first | replace("/", "_") }}.tar'
  loop: '{{ images }}'
  command:
    argv:
      - '/usr/bin/docker'
      - 'save'
      - '{{ item }}'
      - '-o'
      - '/dev/shm/{{ tarfile }}'

- name: 'Ensure images directory exists'
  file:
    state: 'directory'
    path: '/var/lib/rancher/k3s/agent/images'

- name: 'Copy manifest images'
  vars:
    tarfile: '{{ item.split(":") | first | replace("/", "_") }}.tar'
  loop: '{{ images }}'
  copy:
    src: '/dev/shm/{{ tarfile }}'
    dest: '/var/lib/rancher/k3s/agent/images/'

- name: 'Clean up manifest images'
  vars:
    tarfile: '{{ item.split(":") | first | replace("/", "_") }}.tar'
  loop: '{{ images }}'
  file:
    path: '/dev/shm/{{ tarfile }}'
    state: 'absent'

- name: 'Ensure manifest cache directory exists'
  connection: 'local'
  run_once: yes
  become: no
  file:
    path: '{{ manifest_cache_dir }}/{{ namespace }}'
    state: 'directory'

- name: 'Ensure manifests directory exists'
  file:
    path: '{{ manifests_path }}'
    state: 'directory'

- name: 'Check if manifest already exists'
  register: 'reg_manifests'
  loop: '{{ manifests }}'
  stat:
    path: '{{ manifest_cache_dir }}/{{ item | basename }}'

- name: 'Download missing manifests'
  when:
    - 'item.item[0:8] == "https://"'
    - 'not item.stat.exists'
  connection: 'local'
  run_once: yes
  become: no
  loop: '{{ reg_manifests.results }}'
  get_url:
    url: '{{ item.item }}'
    dest: '{{ manifest_cache_dir }}/{{ namespace }}/'
    use_proxy: no

- name: 'Copy in manifests'
  loop: '{{ reg_manifests.results }}'
  copy:
    src: '{{ manifest_cache_dir }}/{{ namespace }}/{{ item.item | basename }}'
    dest: '{{ manifests_path }}/'

- name: 'Install manifests'
  register: 'reg_install_manifests'
  loop: '{{ reg_manifests.results }}'
  failed_when:
    - 'reg_install_manifests.rc != 0'
    - 'e_manifest_already not in reg_install_manifests.stderr'
  command:
    argv:
      - '/usr/local/bin/kubectl'
      - 'create'
      - '-f'
      - '{{ manifests_path }}/{{ item.item | basename }}'
      - '-n'
      - '{{ namespace }}'

# seems like the next task might be failing before the containers register as
# existing --- mitigate with a pause
- name: 'Pause a few seconds for pods to be created'
  pause:
    seconds: 5

# module candidate? k3s_wait
# do repeat-until for long waits
# TODO: figure out failed_when condition for kubectl wait
- name: 'Wait for pods'
  when:
    - 'selectors is defined'
    - 'selectors'
  loop: '{{ selectors }}'
  run_once: yes
  command:
    argv:
      - '/usr/local/bin/kubectl'
      - 'wait'
      - '--timeout={{ timeout | default(default_wait_timeout) }}'
      - '--for=condition=Ready'
      - 'pod'
      - '-n'
      - '{{ namespace }}'
      - '--selector={{ item }}'
...
# vim: set filetype=yaml
